#!/opt/rb/var/www/snorby/script/rails runner
#
# Copyright (c) 2011 redBorder Networks
# Authors: 
# 	Pablo Nebrera Herrera  pablonebrera@eneotecnologia.com
#	Juan Jesus Prieto:     jjprieto@eneotecnologia.com
#	Jose Antonio Parra:    japarra@eneotecnologia.com
#
#  Description:
#	It reads the configuration from config/rules2rbIPS.yml. Format:
#		verbose: false
#		cache_dir: "/opt/rb/var/www/snortrules/cache"
#		url_rules:
#		  -
#		    name: "emergingthreats" 
#		    domain: "https://rules.emergingthreats.net"
#		    tgz: "https://rules.emergingthreats.net/open/snort-2.9.1/emerging.rules.tar.gz"
#		    md5: "https://rules.emergingthreats.net/open/snort-2.9.1/emerging.rules.tar.gz.md5"
#		    search:
#		      - "rules"
#
###########################################################################################################	

# Example of use:
#   * ./script/rules2rbIPS -D     -> execute it in verbose mode 
#   * ./script/rules2rbIPS -Df    -> execute it in verbose mode and force an update 

require 'getopt/std'
require 'yaml'
require 'net/http'
require 'tempfile'
require 'digest/md5'

def downloadFile(domain, url, local_file)
  uri = URI.parse(url)
  http = Net::HTTP.new(uri.host, uri.port)
  if uri.scheme == "https"
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    #http.verify_mode = OpenSSL::SSL::VERIFY_PEER
    #http.ca_file = File.join(File.dirname(__FILE__), "cacert.pem")
  end

  http.start do |http|
    resp = http.get(url)
    open(local_file, "wb") do |file|
      file.write(resp.body)
    end
  end
end

config = YAML.load_file("/opt/rb/var/www/snorby/config/rules2rbIPS.yml")
opt = Getopt::Std.getopts("d:Df")
config["verbose"]   = true     if opt["D"]
config["verbose"]   = false    if config["verbose"].nil?
config["cache_dir"] = "/opt/rb/var/www/snortrules/cache" if config["cache_dir"].nil?

includeRuleDir = []
if opt["d"]
  source = RuleSource.first(:name => "local")
  source = RuleSource.create(:name => "local") if source.nil?
  includeRuleDir << {:name => "local", :dir => opt["d"], :id => source.id}
end

if opt["f"]
  config["force"] = true
else
  config["force"] = false
end

printf("Starting rule2rbIPS\n") if config["verbose"]
newRules=false

#Download rules
unless config["url_rules"].nil?
  config["url_rules"].each do |rule_source|
    begin
      if !rule_source["domain"].nil? && !rule_source["name"].nil?
        tgzLocalFile = "#{config["cache_dir"]}/#{rule_source["name"]}.tgz"
        dFile = true
        if File.exists?(tgzLocalFile)
          md5Content = ""
          md5LocalFile = "#{config["cache_dir"]}/#{rule_source["name"]}.md5"
          if !rule_source["md5"].nil?
            printf("Downloading #{rule_source["md5"]}\n") if config["verbose"]
            downloadFile(rule_source["domain"], rule_source["md5"], md5LocalFile)
            md5Content = File.open(md5LocalFile).first.chop
            localMd5Content = Digest::MD5.hexdigest(File.read(tgzLocalFile));

            if (localMd5Content==md5Content)
              printf("The local file #{tgzLocalFile} is the same than remote file. ") if config["verbose"]
              printf("Ignoring it!!") if config["verbose"] && !config["force"]
              printf("\n") if config["verbose"]
              dFile = false
            end
          end
        end

        if (dFile || config["force"])
          if (dFile)
            printf("Downloading #{rule_source["tgz"]}\n") if config["verbose"]
            downloadFile(rule_source["domain"], rule_source["tgz"], tgzLocalFile)
          end

          #Extracting rules
          dirExtract = "#{config["cache_dir"]}/#{rule_source["name"]}"
          `rm -rf #{dirExtract}` if File.directory? dirExtract
          `mkdir #{dirExtract}`
          printf("Extracting #{tgzLocalFile}\n") if config["verbose"]
          `tar xzf #{tgzLocalFile} -C #{dirExtract}`
          newRules=true
        end
      end
    rescue => err
      printf("Error with the url #{rule_source["name"]} (#{err})\n")
    end
  end
end

if newRules
  config["url_rules"].each do |rule_source|
    source = RuleSource.first(:name => rule_source["name"])
    source = RuleSource.create(:name => rule_source["name"]) if source.nil?
    rule_source["search"].each do |rs|
      includeRuleDir << {:name => rule_source["name"], :dir => "#{config["cache_dir"]}/#{rule_source["name"]}/#{rs}", :id => source.id}
    end
  end
end

unless includeRuleDir.blank?
  timenow   = Time.now
  dbVersion = RuleDbversion.new()
  dbVersion.timestamp = timenow
  dbVersion.save
end

includeRuleDir.each do |rulesDir|
  printf("Processing %s rules (%s)\n", rulesDir[:name], rulesDir[:dir]) if config["verbose"]
  if !Dir.exist?(rulesDir[:dir])
    printf("    - Directory %s does not exist. Ignoring it!!\n", rulesDir[:dir]) if config["verbose"]
  else
    Rule.transaction do |t|
      begin 
        rulesDirectory = Dir.open(rulesDir[:dir])
        pathRulesDir   = rulesDirectory.to_path
        rulesDirectory.to_a.each do |file|
          next if file == "." or file == ".."
          next unless file =~ /\.rules$/
          ruleFile = pathRulesDir + "/" + file
          category = file.gsub(".rules","").strip

          rc1 = RuleCategory1.first(:name => category)
          if rc1.nil?
            rc1 = RuleCategory1.new();
            rc1.name = category
            rc1.save
          end

          ruleFile = File.open(ruleFile)

          while ruleLine = ruleFile.gets
            ruleLine.chop!
            ruleMatch = /^(?<action>\w+)\s+(?<protocol>\w+)\s+(?<l3l4>[^(]+)\s+(?<rule>\(.+\))\s*$/.match(ruleLine)
            unless ruleMatch.nil?
              sidRuleMatch = /; sid:(?<sid>\d+);/.match(ruleMatch[:rule])
              unless sidRuleMatch.nil?
                msgRuleMatch = /\(msg:"(?<msg>[^"]+)";/.match(ruleMatch[:rule])
                unless msgRuleMatch.nil?
                  classtypeRuleMatch = /; classtype:(?<classtype>[^;]+);/.match(ruleMatch[:rule])
                  if classtypeRuleMatch.nil?
                    category2="unknown"
                  else
                    category2=classtypeRuleMatch[:classtype].strip
                  end

                  rc2 = RuleCategory2.first(:name => category2)

                  if rc2.nil?
                    rc2 = RuleCategory2.new();
                    rc2.name = category2
                    rc2.save
                  end

                  rev=0
                  revRuleMatch = /; rev:(?<rev>\d+);/.match(ruleMatch[:rule])
                  if revRuleMatch.nil?
                    rev=0
                  else
                    rev = revRuleMatch[:rev].to_i
                  end

                  r = Rule.new()
                  r.rule_id      = sidRuleMatch[:sid].to_i
                  r.msg          = msgRuleMatch[:msg]
                  r.category1_id = rc1.id
                  r.category2_id = rc2.id
                  r.protocol     = ruleMatch[:protocol]
                  r.l3l4         = ruleMatch[:l3l4]
                  r.rev          = rev.to_i
                  r.dbversion_id = dbVersion.id
                  r.rule         = ruleMatch[:rule]
                  r.source_id    = rulesDir[:id]

                  #printf("    - rule sid: %d\n", r.rule_id) if config["verbose"]

                  if !r.save && config["verbose"]
                    printf("The rule has not been saved: \n   Rule: %s\n   Errors:%s\n\n", ruleLine, r.errors.inspect);
                  end
                else
                  if config["verbose"]
                    printf("MSG not found!! \n%s\n", ruleLine)
                  end
                end
              else 
                if config["verbose"]
                  printf("SID not found!! \n%s\n", ruleLine)
                end
              end
            end
          end
          ruleFile.close
        end

        rulesDirectory.close

      rescue DataObjects::Error => e
        printf("An error has finalized the transaction. #{e.to_s}\nRolling back\n")
	newRules=false
        p e
        t.rollback
      end
    end
  end
end  

if newRules
  dbVersion.completed = true;
  dbVersion.save
end
printf("Exiting successfully!\n") if config["verbose"]
